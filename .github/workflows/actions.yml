name: Automation Framework CI with Xray Integration

on:
  push:
    branches: [ "**" ]  # Trigger on push to any branch

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'  # Adjust based on your Python version
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements.txt
        # Install a compatible version of pytest-xray
        pip install pytest-xray==0.18.0

    - name: Install Playwright browsers
      run: |
        python -m playwright install --with-deps

    - name: Install Allure CLI
      run: |
        curl -o allure-2.24.1.tgz -OLs https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.24.1/allure-commandline-2.24.1.tgz
        tar -zxvf allure-2.24.1.tgz -C /tmp
        sudo ln -s /tmp/allure-2.24.1/bin/allure /usr/local/bin/allure
        allure --version

    - name: Run tests
      run: |
        mkdir -p reports/allure-results
        mkdir -p reports/xray-results
        # GitHub Actions runners typically have 2 cores
        # Disable assertion rewriting to avoid the lineno error
        PYTHONDONTWRITEBYTECODE=1 python -m pytest tests -n 2 --alluredir=reports/allure-results --dist=loadfile --xray --xray-testplan-key="$XRAY_TESTPLAN_KEY" --jira-xray-base-url="$JIRA_URL" --xray-output-path="reports/xray-results/xray-report.json"
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: testdb
        JIRA_URL: ${{ secrets.JIRA_URL }}
        JIRA_USERNAME: ${{ secrets.JIRA_USERNAME }}
        JIRA_PASSWORD: ${{ secrets.JIRA_API_TOKEN }}
        XRAY_CLIENT_ID: ${{ secrets.XRAY_CLIENT_ID }}
        XRAY_CLIENT_SECRET: ${{ secrets.XRAY_CLIENT_SECRET }}
        XRAY_TESTPLAN_KEY: ${{ github.event.inputs.testplan_key || '' }}

    - name: Generate Allure report
      if: always()  # Generate report even if tests fail
      run: |
        allure generate reports/allure-results -o reports/allure-report --clean

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: reports/allure-report/
        retention-days: 30

    - name: Deploy Allure report to GitHub Pages
      if: github.ref == 'refs/heads/main' && always()  # Only deploy from main branch
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./reports/allure-report
        publish_branch: gh-pages
        
    - name: Upload Xray Test Results to Jira
      if: always()  # Upload results even if tests fail
      uses: mikepenz/xray-action@v2
      with:
        username: ${{ secrets.JIRA_USERNAME }}
        password: ${{ secrets.JIRA_API_TOKEN }}
        testEnvironments: 'GitHub CI'
        testPlanKey: ${{ github.event.inputs.testplan_key || '' }}
        projectKey: ${{ secrets.JIRA_PROJECT_KEY }}
        xrayCloud: ${{ secrets.XRAY_CLOUD_ENABLED || 'true' }}
        xrayBaseUrl: ${{ secrets.JIRA_URL }}
        testExecKey: ''
        report: reports/xray-results/xray-report.json
        
    # Fallback approach in case the pytest-xray plugin fails
    - name: Alternative Xray Test Results Upload
      if: failure() && hashFiles('reports/allure-results/**') != ''
      run: |
        # Convert Allure results to Xray format
        python -c "
        import json
        import os
        import glob
        
        # Create a simple Xray JSON structure
        xray_report = {
            'info': {
                'summary': 'Test Execution from GitHub CI',
                'description': 'Automated test execution from GitHub Actions workflow'
            },
            'tests': []
        }
        
        # Process Allure result files
        for result_file in glob.glob('reports/allure-results/*.json'):
            if 'result' not in result_file:
                continue
                
            try:
                with open(result_file, 'r') as f:
                    result = json.load(f)
                    
                # Extract test case info - you'll need to adapt this
                # to match your actual test naming convention
                full_name = result.get('fullName', '')
                test_key = ''
                
                # Extract PROJ-123 style keys from test name or labels
                # This assumes test names or markers contain the Xray test ID
                import re
                match = re.search(r'([A-Z]+-\d+)', full_name)
                if match:
                    test_key = match.group(1)
                
                # Process test status
                status = 'PASS' if result.get('status') == 'passed' else 'FAIL'
                
                # Only add tests with valid test keys
                if test_key:
                    xray_report['tests'].append({
                        'testKey': test_key,
                        'status': status,
                        'comment': f'Execution from GitHub CI pipeline'
                    })
            except Exception as e:
                print(f'Error processing {result_file}: {str(e)}')
        
        # Write the Xray report
        with open('reports/xray-results/xray-report-fallback.json', 'w') as f:
            json.dump(xray_report, f, indent=2)
        "
        
        # Upload to Xray using curl
        curl -H "Content-Type: application/json" \
             -X POST \
             -u "${{ secrets.JIRA_USERNAME }}:${{ secrets.JIRA_API_TOKEN }}" \
             --data @reports/xray-results/xray-report-fallback.json \
             "${{ secrets.JIRA_URL }}/rest/api/2/import/execution"