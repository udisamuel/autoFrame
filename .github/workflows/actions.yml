name: Automation Framework CI with Xray Integration

on:
  push:
    branches: [ "**" ]  # Trigger on push to any branch

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'  # Adjust based on your Python version
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements.txt
        pip install pytest-xray  # Install pytest-xray plugin

    - name: Install Playwright browsers
      run: |
        python -m playwright install --with-deps

    - name: Install Allure CLI
      run: |
        curl -o allure-2.24.1.tgz -OLs https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.24.1/allure-commandline-2.24.1.tgz
        tar -zxvf allure-2.24.1.tgz -C /tmp
        sudo ln -s /tmp/allure-2.24.1/bin/allure /usr/local/bin/allure
        allure --version

    - name: Run tests
      run: |
        mkdir -p reports/allure-results
        mkdir -p reports/xray-results
        # GitHub Actions runners typically have 2 cores
        python -m pytest tests -n 2 --alluredir=reports/allure-results --dist=loadfile --xray --xray-testplan-key="$XRAY_TESTPLAN_KEY" --jira-xray-base-url="$JIRA_URL" --xray-output-path="reports/xray-results/xray-report.json"
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: testdb
        JIRA_URL: ${{ secrets.JIRA_URL }}
        JIRA_USERNAME: ${{ secrets.JIRA_USERNAME }}
        JIRA_PASSWORD: ${{ secrets.JIRA_API_TOKEN }}
        XRAY_CLIENT_ID: ${{ secrets.XRAY_CLIENT_ID }}
        XRAY_CLIENT_SECRET: ${{ secrets.XRAY_CLIENT_SECRET }}
        XRAY_TESTPLAN_KEY: ${{ github.event.inputs.testplan_key || '' }}

    - name: Generate Allure report
      if: always()  # Generate report even if tests fail
      run: |
        allure generate reports/allure-results -o reports/allure-report --clean

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: reports/allure-report/
        retention-days: 30

    - name: Deploy Allure report to GitHub Pages
      if: github.ref == 'refs/heads/main' && always()  # Only deploy from main branch
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./reports/allure-report
        publish_branch: gh-pages
        
    - name: Upload Xray Test Results to Jira
      if: always()  # Upload results even if tests fail
      uses: mikepenz/xray-action@v2
      with:
        username: ${{ secrets.JIRA_USERNAME }}
        password: ${{ secrets.JIRA_API_TOKEN }}
        testEnvironments: 'GitHub CI'
        testPlanKey: ${{ github.event.inputs.testplan_key || '' }}
        projectKey: ${{ secrets.JIRA_PROJECT_KEY }}
        xrayCloud: ${{ secrets.XRAY_CLOUD_ENABLED || 'true' }}
        xrayBaseUrl: ${{ secrets.JIRA_URL }}
        testExecKey: ''
        report: reports/xray-results/xray-report.json